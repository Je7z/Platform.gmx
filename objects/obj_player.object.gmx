<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create

grav = 0.5;
hsp = 0;
vsp = 0;

jumpspeed = 9;
movespeed = 2;
ladderspeed = 2;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Step

KR = keyboard_check(vk_right);
KL = -keyboard_check(vk_left);
KJ = keyboard_check_pressed(vk_space);

KU = -keyboard_check(vk_up);
KD = keyboard_check(vk_down);

away = false;

//Gravity
if(vsp &lt; 50) {
    vsp += grav;
}
//Move Horizontal
moveH = KR + KL;
moveV = KU + KD;
hsp = moveH * movespeed;

if(place_meeting(x,y + 1, obj_wall) &amp;&amp; KJ) {
    vsp = -jumpspeed;
}


if(place_meeting(x,y, obj_moving_vertical) &amp;&amp; KJ) {
    vsp = -jumpspeed;
}


//Check Collision with obj_away
with(instance_place(x,y + vsp,obj_away)) {
    if(bbox_top &gt; other.bbox_bottom) {
        other.away = true;
    } else {
       other.away = false;
    }
}

//Collision Horizontal - obj_wall
if(place_meeting(x + hsp,y, obj_wall)) {

    while(!place_meeting(x + sign(hsp),y, obj_wall)) {
        x += sign(hsp);
    }
    
    hsp = 0;
}

//Collision Vertical - obj_wall
if(place_meeting(x,y + vsp, obj_wall)) {

    while(!place_meeting(x,y + sign(vsp), obj_wall)) {
        y += sign(vsp);
    }
    
    vsp = 0;     
}

//Collision Vertical - obj_away
if(away) {
    if(place_meeting(x,y + vsp, obj_away)) {
    
        while(!place_meeting(x,y + sign(vsp), obj_away)) {
            y += sign(vsp);
        }
        
        vsp = 0;
        
        //Jumping 
        if(KJ) {
            vsp = -jumpspeed;
        }
    }
}


//Collision Ladder
if(place_meeting(x,y + vsp, obj_ladder)) {

    while(!place_meeting(x,y + sign(vsp), obj_ladder)) {
        y += sign(vsp);
    }
    
    vsp = moveV * ladderspeed;
    
    if(!collision_point(x,y + (obj_player.sprite_height - 1),obj_ladder,false, true)) {
    
        vsp = 0;
        
        //Move Down player 
       if(moveV &gt; 0) {
            vsp = moveV * ladderspeed;;
       }
       
       //Jumping 
        if(KJ) {
            vsp = -jumpspeed;
        }
        
    }
    
    Collision_Vertical();
    
}

/*
with(instance_place(x,y + 1, obj_moving)) {
    if(bbox_top &gt; other.bbox_bottom) {
        //other.x += hsp + other.moveH;
        //other.x = x + hsp + other.moveH;
        //other.x = ceil(bbox_top - 17- hsp);
        other.hsp = sign(hsp) * 2;
        show_debug_message(xprevious);
     } 
    
}
*/

y += vsp;
x += hsp;


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Coins

global.blonze_coins = 0;
global.silver_coins = 0;
global.gold_coins = 0;


global.coins = global.blonze_coins + global.silver_coins + global.gold_coins;
show_debug_message(global.coins);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
